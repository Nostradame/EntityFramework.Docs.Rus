Porting a Code-Based Model (Code First & Code First to Existing Database)
=========================================================================

If you've read all the caveats and you are ready to port, then here are some guidelines to help you get started.

.. contents:: `В этой статье:`
    :depth: 2
    :local:

Установка пакетов EF Core NuGet
-------------------------------

To use EF Core, you install the NuGet package for the database provider you want to use. For example, when targeting SQL Server, you would install ``Microsoft.EntityFrameworkCore.SqlServer``. Подробнее смотрите раздел :doc:`/providers/index`.

If you are planning to use migrations, then you should also install the ``Microsoft.EntityFrameworkCore.Tools`` package.

Лучше оставить NuGet пакет EF6.x (EntityFramework) установленным, так как EF Core и EF6.x могут использоваться бок-о-бок в одном приложении. Тем не менее, если вы не намерены использовать EF6.x ни в каких областях вашего приложения, то удаление пакета поможет выявить ошибки компиляции в фрагментах кода, которые требуют внимания.

Swap namespaces
---------------

Most APIs that you use in EF6.x are in the ``System.Data.Entity`` namespace (and related sub-namespaces). The first code change is to swap to the ``Microsoft.EntityFrameworkCore`` namespace. You would typically start with your derived context code file and then work out from there, addressing compilation errors as they occur.

Context configuration (connection etc.)
---------------------------------------

As described in :doc:`ensure-requirements`, EF Core has less magic around detecting the database to connect to. You will need to override the ``OnConfiguring`` method on your derived context, and use the database provider specific API to setup the connection to the database.

Most EF6.x applications store the connection string in the applications ``App/Web.config`` file. In EF Core, you read this connection string using the ``ConfigurationManager`` API. You may need to add a reference to the ``System.Configuration`` framework assembly to be able to use this API.

.. code-block:: c#
    :linenos:

    public class BloggingContext : DbContext
    {
        public DbSet<Blog> Blogs { get; set; }
        public DbSet<Post> Posts { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
          optionsBuilder.UseSqlServer(ConfigurationManager.ConnectionStrings["BloggingDatabase"].ConnectionString);
        }
    }

Обновление кода
---------------

At this point, it's a matter of addressing compilation errors and reviewing code to see if the behavior changes will impact you.

Existing migrations
-------------------

There isn't really a feasible way to port existing EF6.x migrations to EF Core.

If possible, it is best to assume that all previous migrations from EF6.x have been applied to the database and then start migrating the schema from that point using EF Core. To do this, you would use the ``Add-Migration`` command to add a migration once the model is ported to EF Core. You would then remove all code from the ``Up`` and ``Down`` methods of the scaffolded migration. Subsequent migrations will compare to the model when that initial migration was scaffolded.

Тестирование портирования
-------------------------

Даже если ваше приложение собирается, это не означает, что оно успешно портировано на EF Core. Вам нужно будет проверить все области вашего приложения, чтобы убедиться, что ни одно из изменений в поведении не воздействует негативно на ваше приложение.
