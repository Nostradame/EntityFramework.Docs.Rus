Портирование модели, основанной на коде (Code First & Code First для существующей базы данных)
==============================================================================================

Если вы читали все предостережения и готовы к портмрованию, то здесь некоторые руководящие принципы, чтобы помочь вам начать работу.

.. contents:: `В этой статье:`
    :depth: 2
    :local:

Установка пакетов EF Core NuGet
-------------------------------

Чтобы использовать EF Core, установите the NuGet пакет того провайдера базы данных, которого вы хотите использоавть. Например, если выбран SQL Server, вы должны установить ``Microsoft.EntityFrameworkCore.SqlServer``. Подробнее смотрите раздел :doc:`/providers/index`.

Если вы планируете использовать миграций, то вы также должны установить пакет ``Microsoft.EntityFrameworkCore.Tools``.

Лучше оставить NuGet пакет EF6.x (EntityFramework) установленным, так как EF Core и EF6.x могут использоваться бок-о-бок в одном приложении. Тем не менее, если вы не намерены использовать EF6.x ни в каких областях вашего приложения, то удаление пакета поможет выявить ошибки компиляции в фрагментах кода, которые требуют внимания.

Присваивание пространств имен
-----------------------------

Большинство API, которые вы использовали в EF6.x находятся в пространстве имен ``System.Data.Entity`` (и соответствующих под-пространствах). Первое изменение кода - это присваивание пространства имен ``Microsoft.EntityFrameworkCore``. Обычно вы должны начать с файла кода вашего производного контекста, а затем работать от него, обращаясь к ошибкам компиляции по мере их возникновения.

Настройка контекста (подключение и т.д.)
----------------------------------------

Как описано в разделе :doc:`ensure-requirements`, EF Core имеет меньше магии для обнаружения базы данных, к которой нужно подключится. Вы должны будете переопределить метод ``OnConfiguring`` вашего производного контекста, и использовать API провайдера базы данных для настройки подключения к базе данных.

Болььшинство приложений EF6.x хранят строку подключения в файле приложения ``App/Web.config``. В EF Core, вы читаете эту строку подключения при помощи ``ConfigurationManager`` API. Вам может понадобиться добавить ссылку на сборку каркаса ``System.Configuration`` чтобы получить возможность использовать эти API.

.. code-block:: c#
    :linenos:

    public class BloggingContext : DbContext
    {
        public DbSet<Blog> Blogs { get; set; }
        public DbSet<Post> Posts { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
          optionsBuilder.UseSqlServer(ConfigurationManager.ConnectionStrings["BloggingDatabase"].ConnectionString);
        }
    }

Обновление кода
---------------

На данный момент вы столкнетесь с вопросом решения ошибок компиляции и анализа кода, чтобы увидеть, как ведет себя изменение поведения.

Существующие миграции
---------------------

Не существует действительно возможного пути портировать существующие миграции EF6.x на EF Core.

Если возможно, лучше всего предположить, что все предыдущие миграции из EF6.x должны быть применены к базе данных, а затем выполнить миграцию схемы из этой точки при помощи EF Core. Для этого вы должны использовать команду ``Add-Migration`` для добавления миграции после того, как модель портирована на  EF Core. Затем вы должны удалить весь код из методов ``Up`` и ``Down`` сгенерированных миграций. Последующие миграции будут сравнивать с моделью, если такая начальная миграция была сгенерирована.

Тестирование портирования
-------------------------

Даже если ваше приложение собирается, это не означает, что оно успешно портировано на EF Core. Вам нужно будет проверить все области вашего приложения, чтобы убедиться, что ни одно из изменений в поведении не воздействует негативно на ваше приложение.
