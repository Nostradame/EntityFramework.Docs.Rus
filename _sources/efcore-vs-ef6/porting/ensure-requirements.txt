Убедитесь, что EF Core будет работать с вашим приложением
=========================================================

Перед тем, как начать процесс портирования важно проверить, что EF Core отвечает требованиям доступа к данным вашего приложения.

.. contents:: `В этой статье:`
    :depth: 2
    :local:

Недостающие функции
-------------------

Убедитесь, что в EF Core есть все функции, необходимые для использования в приложении. Для детального сравнения набора функций EF Core и EF6.x. смотрите раздел :doc:`/efcore-vs-ef6/features`. Если какие-либо необходимые функции отсутствуют, убедитесь, что вы можете компенсировать отсутствие этих функций, прежде чем портировать на EF Core.


Изменения поведения
-------------------

Это не исчерпывающий перечень некоторых изменений в поведении между EF6.x и EF Core. Важно иметь это в виду при портировании вашего приложения, поскольку после замены на EF Core поведение приложения может измениться, но ошибки компиляции отображаться не будут.

DbSet.Add/Attach и поведения графа
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

В EF6.x, в результате вызова метода ``DbSet.Add()`` сущности, происходит рекурсивный поиск всех сущностей, на которые ссылаются ее навигационные свойства. Любые найденные, но уже не отслеживаемые контекстом сущности, так же будут помечены как добавленные. ``DbSet.Attach()`` ведет себя так же, за исключением того, что все объекты помечаются как без изменений..

EF Core выполняет аналогичный рекурсивный поиск, но с некоторыми немного различными правилами.
  * Основная сущность всегда в состоянии запроса (добавляет по ``DbSet.Add`` и не изменяет по ``DbSet.Attach``).
  * Для сущностей, которые найдены во время рекурсивного поиска по навигационным свойствам:
      * Если первичный ключ сущности сгенерирован в хранилище
          * Если в первичном ключе не установлено значение, состояние изменяется на "добавлено". Значение первичного ключа считается "не установлено" если ему назначено значение свойства по умолчанию соответствующего типа CLR (например ``0`` для ``int``, ``null`` для ``string``, и т.д.).
          * Если значение первичного ключа установлено, то состояние устанавливается в "неизменяемое".
      * Если первичный ключ сгенерирован не в базе данных, то сущность записывается в том же самом состоянии, как и основная.

Инициализация базы данных Code First
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

EF6.x has a significant amount of magic it performs around selecting the database connection and initializing the database. Some of these rules include:
  * If no configuration is performed, EF6.x will select a database on SQL Express or LocalDb.
  * If a connection string with the same name as the context is in the applications ``App/Web.config`` file, this connection will be used.
  * If the database does not exist, it is created.
  * If none of the tables from the model exist in the database, the schema for the current model is added to the database. If migrations are enabled, then they are used to create the database.
  * If the database exists and EF6.x had previously created the schema, then the schema is checked for compatibility with the current model. An exception is thrown if the model has changed since the schema was created.

EF Core does not perform any of this magic.
  * The database connection must be explicitly configured in code.
  * No initialization is performed. You must use ``DbContext.Database.Migrate()`` to apply migrations (or ``DbContext.Database.EnsureCreated()`` and ``EnsureDeleted()`` to create/delete the database without using migrations).

Code First table naming convention
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

EF6.x runs the entity class name through a pluralization service to calculate the default table name that the entity is mapped to.

EF Core uses the name of the ``DbSet`` property that the entity is exposed in on the derived context. If the entity does not have a ``DbSet`` property, then the class name is used.
