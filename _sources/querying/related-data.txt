Загрузка связанных данных
=========================

Entity Framework Core позволяет использовать навигационные свойства в модели для загрузки связанных сущностей. Есть три основных модели O/RM, используемых для загрузки связанных данных.
 * **Жадная загрузка** означает, что связанные данные загружаются из базы данных как часть начального запроса.
 * **Явная загрузка** означает, что связанные данные явно загружаются из базы данных в более позднее время.
 * **Ленивая загрузка** означает, что связанные данные прозрачно загружаются из базы данных, когда свойство навигации доступны. Ленивая загрузка пока не доступна в EF Core.

.. contents:: `В этой статье:`
    :depth: 2
    :local:

.. include:: /_shared/sample.txt
.. _пример: https://github.com/aspnet/EntityFramework.Docs/tree/master/samples/Querying

Жадная загрузка
---------------

Вы можете использовать метод ``Include`` чтобы указать связанные данные, которые будут включены в результаты запроса. В следующем примере, в блогах, возвращаемых в результате запроса, свойства ``Posts`` будут заполнены связанными записями.

.. includesamplefile:: Querying/Querying/RelatedData/Sample.cs
        :language: c#
        :lines: 12-14
        :dedent: 16
        :linenos:

.. tip::
    Entity Framework Core будет автоматически настраивать навигационные свойства любых других сущностей, которые ранее были загружены в экземпляр контекста. Так что даже если вы явно не включили данные для навигационного свойства, то оно по-прежнему может быть заполнено, если ранее были загружены все или некоторые из соответствующих структур.

Вы можете включить в один запрос связанные данные из нескольких отношений.

.. includesamplefile:: Querying/Querying/RelatedData/Sample.cs
        :language: c#
        :lines: 31-34
        :dedent: 16
        :linenos:

Включение нескольких уровней
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Вы можете перескакивать через отношения для включения различных уровней связанных данных при помощи метода ``ThenInclude``. Следующий пример загружает все блоги, связанные с ними записи, и авторов каждого блога.

.. includesamplefile:: Querying/Querying/RelatedData/Sample.cs
        :language: c#
        :lines: 39-42
        :dedent: 16
        :linenos:

Вы можете связать несколько вызовов ``ThenInclude`` для продолжения включения дополнительных уровней связанных данных.

.. includesamplefile:: Querying/Querying/RelatedData/Sample.cs
        :language: c#
        :lines: 47-51
        :dedent: 16
        :linenos:

Вы можете комбинировать любые из них для включения связанных данных из разных уровней и разных рутов в том же самом запросе.

.. includesamplefile:: Querying/Querying/RelatedData/Sample.cs
        :language: c#
        :lines: 56-62
        :dedent: 16
        :linenos:

Игнорируемые включения
^^^^^^^^^^^^^^^^^^^^^^

Если вы измените запрос так, чтобы он больше не возвращал экземпляры типов сущностей, с которых начинался запрос, то операторы включения игнорируются.

В следующем примере, операторы включения основаны на ``Blog``, но затем используется оператор ``Select`` чтобы изменить запрос на возвращение анонимных типов. В данном случае, оператор включения не имеет никакого эффекта.

.. includesamplefile:: Querying/Querying/RelatedData/Sample.cs
        :language: c#
        :lines: 19-26
        :dedent: 16
        :linenos:

По умолчанию, EF Core будет логгировать предупреждения если оператор включения игнорируется. Для получения подробной информации о просмотре информации логгирования смотрите раздел :doc:`/miscellaneous/logging`. Вы можете изменить поведение при игнорировании оператора включения на либо выброс исключения, либо игнорирование. Это делается при настройке параметров для вашего контекста - обычно в ``DbContext.OnConfiguring``, или в ``Startup.cs`` если вы используете ASP.NET Core.

.. includesamplefile:: Querying/Querying/RelatedData/ThrowOnIgnoredInclude/BloggingContext.cs
        :language: c#
        :lines: 11-16
        :emphasize-lines: 5
        :dedent: 8
        :linenos:

Явная загрузка
--------------

Для явной загрузки в EF Core все еще нет никаких классов API. Вы можете посмотреть `explicit loading item on our backlog <https://github.com/aspnet/EntityFramework/issues/625>`_ чтобы отслеживать эту фичу.

Однако, вы можете использовать LINQ запросы для загрузки данных, связанных с существующим экземпляром сущности, фильтруя связанные сущности с сущностями в запросе. Так как EF Core будет автоматически настраивать навигационные свойства любых других сущностей, которые ранее были загружены в экземпляр контекста, то загруженные данные будут заполнены желаемыми навигационными свойствами.

В следующем примере, запрос используется для загрузки блога, а затем позже запрос используется для загрузки записей. относящихся к блогу. Загруженные записи будут представленны в свойстве ``Posts`` предварительно загруженного блога.

.. includesamplefile:: Querying/Querying/RelatedData/Sample.cs
        :language: c#
        :lines: 68-73
        :dedent: 16
        :linenos:

Ленивая загрузка
----------------

Ленивая загрузка пока еще не поддерживается в EF Core. Вы можете смотреть `lazy loading item on our backlog <https://github.com/aspnet/EntityFramework/issues/3797>`_ для отслеживания этой фичи.
