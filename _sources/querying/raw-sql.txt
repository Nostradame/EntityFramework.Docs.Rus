Необработанные запросы SQL
==========================

При работе с реляционной базой данных, Entity Framework Core позволяет дойти до необработанных запросов SQL. Это может быть полезно, если запрос, который вы хотите выполнить, не может быть выражен с помощью LINQ или в результате использования запроса LINQ в базу данных будет записан некачественный SQL.

.. contents:: `В этой статье:`
    :depth: 2
    :local:

.. include:: /_shared/sample.txt
.. _пример: https://github.com/aspnet/EntityFramework.Docs/tree/master/samples/Querying

Ограничения
-----------

Существует несколько ограничений, которые необходимо помнить при использовании необработанных SQL-запросов:
 * SQL запросы могут быть использованы только для возвращения типов сущностей, которые являются частью вашей модели. У нас на нашем бэклоге есть запрос на улучшение - `разрешить возвращение любых типов из необработанных SQL запросов <https://github.com/aspnet/EntityFramework/issues/1862>`_.
 * SQL запрос должен возвращать данные для всех свойств типа сущности.
 * Имена столбцов в результирующем наборе должны соответствовать тем именам столбцов, чьи свойства сопоставляются. Обратите внимание, что это отличается от EF6.x, где сопоставление столбца/свойства игнорируется для необработанных запросов SQL и результирующий набор имен столбцов должен был соответствовать именам свойств.
 * SQL запрос не может содержать связанные данные. Однако, во многих случаях вы можете составить смешанный запрос, используя оператор ``Include`` чтобы вернуть связанные данные (смотрите раздел `Включение связанных данных`_).

Основные необработанные SQL запросы
-----------------------------------

Вы можете использовать расширение метода `FromSql` чтобы выполнить LINQ запрос, основанный на необработанном SQL запросе.

.. includesamplefile:: Querying/Querying/RawSQL/Sample.cs
        :language: c#
        :lines: 13-15
        :dedent: 16
        :linenos:

Необработанные запросы SQL могут использоваться для выполнения хранимой процедуры.

.. includesamplefile:: Querying/Querying/RawSQL/Sample.cs
        :language: c#
        :lines: 20-22
        :dedent: 16
        :linenos:

Передача параметров
-------------------

Как и в любом другом API, который принимает SQL, важно параметризировать любой пользовательский ввод для защиты от атак SQL внедрения. Вы можете включить параметр заполнитель в строку SQL запроса, а затем задать значения параметров в качестве дополнительных аргументов. Любые значения параметров, которые вы предоставляете, будут автоматически конвертированы в ``DbParameter``.

Следующий пример передает один параметр в хранимую процедуру. Хотя это может выглядеть как синтаксис типа ``String.Format``, предоставленное значение обертывается в параметре и созданное имя параметра вставляется там, где был указан заполнитель ``{0}``.

.. includesamplefile:: Querying/Querying/RawSQL/Sample.cs
        :language: c#
        :lines: 27-31
        :dedent: 16
        :linenos:

Можно также создать DbParameter и предоставить его в качестве значения параметра. Это позволяет использовать именованные параметры в строке SQL запроса

.. includesamplefile:: Querying/Querying/RawSQL/Sample.cs
        :language: c#
        :lines: 36-40
        :dedent: 16
        :linenos:

Объединение запросов LINQ
-------------------------

Если в базе данных SQL запрос может быть объединен, то вы можете объединить его поверх начального необработанного SQL запроса при помощи LINQ операторов. SQL запросы могут быть совмещены на время с ключевым словом ``SELECT``.

В следующем примере используется необработанный SQL запрос, который выбирает из Table-Valued Function (TVF), а затем совмещает их при помощи LINQ для выполнения фильтрации и сортировки.

.. includesamplefile:: Querying/Querying/RawSQL/Sample.cs
        :language: c#
        :lines: 45-51
        :dedent: 16
        :linenos:

Включение связанных данных
^^^^^^^^^^^^^^^^^^^^^^^^^^

Композиции с LINQ операторами могут использоваться для включения в запрос связанных данных.

.. includesamplefile:: Querying/Querying/RawSQL/Sample.cs
        :language: c#
        :lines: 56-61
        :dedent: 16
        :linenos:
