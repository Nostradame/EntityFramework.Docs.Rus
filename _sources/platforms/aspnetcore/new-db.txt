Приложение ASP.NET Core для новой базы данных
================================================

В этом руководстве вы будете создавать MVC приложение ASP.NET Core, которое выполняет простой доступ к данным при помощи Entity Framework. Вы будете использовать миграции для создания базы данных из модели.

.. contents:: `В этой статье:`
    :depth: 2
    :local:

.. include:: /_shared/sample.txt
.. _пример: https://github.com/aspnet/EntityFramework.Docs/tree/master/samples/Platforms/AspNetCore/AspNetCore.NewDb

Необходимые условия
---------------------------

Для продолжения необходимы следующие условия:

	* Visual Studio 2015 Update 3
	* `.NET Core for Visual Studio <https://go.microsoft.com/fwlink/?LinkId=817245>`_

Создание нового проекта
-------------------------------

	* Откройте Visual Studio 2015
	* :menuselection:`File --> New --> Project...`
	* В левом столбце выберите: :menuselection:`Шаблоны --> Visual C# --> Веб`
	* Выберите шаблон проекта **Веб приложение ASP.NET Core (.NET Core)**
	* Введите в качестве имени **EFGetStarted.AspNetCore.NewDb** и нажмите **OK**
	* Подождите, пока не появится диалог **Новое веб-приложение ASP.NET Core**
	* Убедитесь, что **Проверка подлинности** установлена в **"без проверки подлинности"**
	* Нажмите **OK**

.. attention::
    Если для **Проверки подлинности** вы вместо **без проверки подлинности** используете **Индивидуальные записи отдельных пользователей**, то в ваш проект будет добавлена модель Entity Framework `Models\\IdentityModel.cs`. Используя техники этого руководства, вы узнаете, что нужно сделать, чтобы добавить вторую модель, или расширить существующую модель, чтобы она содержала классы сущностей.

Установка Entity Framework
---------------------------------

Чтобы использовать EF Core, установите пакет провайдера базы данных, для которой вы хотите настроить таргетинг. Это пошаговое руководство использует SQL Server. Список доступных провайдеров :doc:`/providers/index`.

* :menuselection:`Tools --> NuGet Package Manager --> Package Manager Console`
* Run ``Install-Package Microsoft.EntityFrameworkCore.SqlServer``

.. note::
    В проекте ASP.NET Core команда ``Install-Package`` выполняется очень быстро, а установка пакета происходит в теневом режиме. Когда установка завершится, вы увидите надпись **(Restoring...)** в разделе **References** в **Solution Explorer**.

Позже в этом руководстве для поддержания базы данных мы будем также использовать некоторые команды Entity Framework. Итак, мы установили пакет команд.

* Выполните команду ``Install-Package Microsoft.EntityFrameworkCore.Tools –Pre``
* Откройте файл **project.json**
* Перейдите в раздел ``tools`` и добавьте команду ``ef`` как показано ниже

.. includesamplefile:: Platforms/AspNetCore/AspNetCore.NewDb/project.json
      :linenos:
      :lines: 29-33
      :emphasize-lines: 2

Создание модели
---------------------

Теперь пришло время определить контекст и классы сущностей, составляющих вашу модель.

	* Щелкните правой кнопкой мыши на **Solution Explorer** и выберите: :menuselection:`Добавить --> Создать папку`
	* Назовите папку **Models** 
	* Щелкните правой кнопкой мыши на папке **Models** и выберите: :menuselection:`Добавить --> Создать элемент...`
	* В левом столбце выберите: :menuselection:`Установленные --> Code`
	* Выберите шаблон элемента **Class** 
	* Назовите файл **Model.cs** и нажмите **OK**
	* Замените содержимое файла следующим кодом

.. includesamplefile:: Platforms/AspNetCore/AspNetCore.NewDb/Models/Model.cs
        :language: c#
        :linenos:

.. note::
    В реальном приложении вы должны помещать каждый класс вашей модели в отдельном файле. В этом уроке для упрощения, мы размещаем все классы в одном файле.

Регистрация контекста при помощи внедрения зависимостей
-------------------------------------------------------------------------

Концепция внедрения зависимостей является центральной в ASP.NET Core. Сервисы (такие как ``BloggingContext``) регистрируются при запуске приложения при помощи механизма внедрения зависимостей. Компоненты, необходимые этим сервисам (такие как MVC контроллеры) предоставляются им через параметры конструктора или через свойства. Более подробную информацию о внедрении зависимостей смотрите в статье `Dependency Injection <http://docs.asp.net/en/latest/fundamentals/dependency-injection.html>`_ на сайте ASP.NET.

Для того, чтобы наши MVC контроллеры начали использовать ``BloggingContext``, мы должны зарегистрировать их как сервисы.

	* Откройте файл **Startup.cs**
	* В начало файла добавьте следующие операторы ``using``

.. includesamplefile:: Platforms/AspNetCore/AspNetCore.NewDb/Startup.cs
        :language: c#
        :linenos:
        :lines: 1-2

Теперь мы можем использовать метод ``AddDbContext`` для регистрации его как сервиса.

	* Найдите метод ``ConfigureServices``
	* Добавьте строки, которые выделены в следующем коде

.. includesamplefile:: Platforms/AspNetCore/AspNetCore.NewDb/Startup.cs
        :language: c#
        :linenos:
        :lines: 30-33
        :emphasize-lines: 3-4

Создание базы данных
----------------------------

Теперь, когда у вас есть модель, вы можете использовать миграции для создания базы данных.

* :menuselection:`Tools –> NuGet Package Manager –> Package Manager Console`
* Выполните команду ``Add-Migration MyFirstMigration`` для скафолдинга миграции, которая создаст первоначальный набор таблиц по вашей модели.
* Выполните команду ``Update-Database`` чтобы применить новую миграцию к вашей базе данных. Поскольку ваша база данных еще не существует, она будет создана для вас перед применением миграции.

.. tip::
    Если в будущем вы сделаете изменения в вашей модели, вы можете использовать команду ``Add-Migration`` чтобы выполнить скаффолдинг новой миграции для внесения соответствующих изменений в схему базы данных. После того, как вы проверили скаффолдированный код (и сделали все необходимые изменения), вы можете использовать команду ``Update-Database``, чтобы внести изменения в базу данных.

    В базе данных EF использует таблицу ``__EFMigrationsHistory``, чтобы отслеживать, какие миграции уже применены к ней.

Создание контроллера
----------------------------

Далее, мы добавим MVC контроллер, который будет использовать EF для запроса и сохранения данных.

	* Щелкните правой кнопкой мыши на папке **Controllers** в **Solution Explorer** и выберите: :menuselection:`Добавить --> Создать элемент...`
	* В левом столбце выберите: :menuselection:`Установленные --> Server-side`
	* Выберите шаблон элемента **Class**
	* Назовите файл **BlogsController.cs** и нажмите **OK**
	* Замените содержимое файла следующим кодом

.. includesamplefile:: Platforms/AspNetCore/AspNetCore.NewDb/Controllers/BlogsController.cs
        :language: c#
        :linenos:

Вы заметите, что контроллер принимает значение ``BloggingContext`` в качестве параметра конструктора. Механизм внедрения зависимостей ASP.NET позаботится о передачи экземпляра ``BloggingContext`` в ваш контроллер.

В контроллере есть действие ``Index``, которое отображает все блоги в базе данных, а действие ``Create`` записывает в базу данных новый блог.

Создание видов
--------------------

Теперь, когда у нас есть контроллер настало время добавить виды, которые определяют пользовательский интерфейс.

Мы начнем с вида для нашего действия ``Index``, которое показывает все блоги.

	* Щелкните правой кнопкой мыши на папке **Views** в **Solution Explorer** и выберите: :menuselection:`Добавить --> Создать папку`
	* Назовите папку **Blogs**
	* Щелкните правой кнопкой мыши на папке **Blogs** и выберите: :menuselection:`Добавить --> Создать элемент...`
	* В левом столбце выберите: :menuselection:`Установленные --> ASP.NET`
	* Выберите шаблон элемента **MVC View Page**
	* Назовите файл **Index.cshtml** и нажмите **Добавить**
	* Замените содержимое файла следующим кодом

.. includesamplefile:: Platforms/AspNetCore/AspNetCore.NewDb/Views/Blogs/Index.cshtml
        :linenos:

Мы так же добавим вид для действия ``Create``, которое позволяет пользователю ввести данные для нового блога.

	* Щелкните правой кнопкой мыши на папке **Blogs** и выберите: :menuselection:`Добавить --> Создать элемент...`
	* В левом столбце выберите: :menuselection:`Установленные --> ASP.NET Core`
	* Выберите шаблон элемента **MVC View Page**
	* Назовите файл **Create.cshtml** и нажмите **Добавить**
	* Замените содержимое файла следующим кодом

.. includesamplefile:: Platforms/AspNetCore/AspNetCore.NewDb/Views/Blogs/Create.cshtml
        :linenos:

Запуск приложения
------------------------

Теперь вы можете запустить приложение, чтобы увидеть его в действии.

	* :menuselection:`Отладка --> Запуск без отладки`
	* Приложение будет построено и открыто в веб-браузере
	* Перейдите в **/Blogs**
	* Нажмите **Create New**
	* Введите **Url** для нового блога и нажмите **Create**

.. image:: _static/create.png

.. image:: _static/index-new-db.png
