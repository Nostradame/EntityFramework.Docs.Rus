Консольное приложение для новой базы данных
==============================================

В этом пошаговом руководстве вы создадите консольное приложение, которое совершает базовый доступ к данным в базе данных Microsoft SQL Server, с помощью Entity Framework. Вы будете использовать миграции для создания базы данных из модели.

.. contents:: `В этой статье:`
    :depth: 2
    :local:

.. include:: /_shared/sample.txt
.. _пример: https://github.com/aspnet/EntityFramework.Docs/tree/master/samples/Platforms/FullNet/ConsoleApp.NewDb

Необходимые условия
---------------------------

Для продолжения необходимы следующие условия:

* Visual Studio 2015 Update 3
* `Последняя версия NuGet Package Manager <https://visualstudiogallery.msdn.microsoft.com/5d345edc-2e2d-4a9c-b73b-d53956dc458d>`_
* `последняя версия Windows PowerShell <https://www.microsoft.com/en-us/download/details.aspx?id=40855>`_

Создание нового проекта
-----------------------

* Откройте Visual Studio 2015
* :menuselection:`File --> New --> Project...`
* В левом столбце выберите: :menuselection:`Templates --> Visual C# --> Windows`
* Выберите шаблон проекта **Console Application**
* Убедитесь, что выбрана версия **.NET Framework 4.5.1** или выше
* Дайте проекту имя и нажмите кнопку **OK**

Установка Entity Framework
--------------------------

Чтобы использовать EF Core, установите пакет провайдера базы данных, для которой вы хотите настроить таргетинг. Это пошаговое руководство использует SQL Server. Список доступных провайдеров :doc:`/providers/index`.

* :menuselection:`Tools --> NuGet Package Manager --> Package Manager Console`
* Run ``Install-Package Microsoft.EntityFrameworkCore.SqlServer``

Позже в этом руководстве для поддержания базы данных мы будем также использовать некоторые команды Entity Framework. Итак, мы установили пакет команд.

* Выполните команду ``Install-Package Microsoft.EntityFrameworkCore.Tools –Pre``

Создание модели
---------------

Теперь пришло время определить контекст и классы сущностей, составляющих вашу модель.

* :menuselection:`Project --> Add Class...`
* Введите *Model.cs* в качестве имени и нажмите **OK**
* Замените содержимое файла следующим кодом

.. includesamplefile:: Platforms/FullNet/ConsoleApp.NewDb/Model.cs
        :language: c#
        :linenos:

.. tip::
    В реальном приложении вы будете размещать каждый класс в отдельном файле а строку подключения размещать в файле ``App.Config`` и читать ее с помощью ``ConfigurationManager``. В этом учебнике для простоты мы ставим все в одном файле кода.

Создание базы данных
--------------------

Теперь, когда у вас есть модель, вы можете использовать миграции для создания базы данных.

* :menuselection:`Tools –> NuGet Package Manager –> Package Manager Console`
* Выполните команду ``Add-Migration MyFirstMigration`` для скафолдинга миграции, которая создаст первоначальный набор таблиц по вашей модели.
* Выполните команду ``Update-Database`` чтобы применить новую миграцию к вашей базе данных. Поскольку ваша база данных еще не существует, она будет создана для вас перед применением миграции.

.. tip::
    Если в будущем вы сделаете изменения в вашей модели, вы можете использовать команду ``Add-Migration`` чтобы выполнить скаффолдинг новой миграции для внесения соответствующих изменений в схему базы данных. После того, как вы проверили скаффолдированный код (и сделали все необходимые изменения), вы можете использовать команду ``Update-Database``, чтобы внести изменения в базу данных.

    В базе данных EF использует таблицу ``__EFMigrationsHistory``, чтобы отслеживать, какие миграции уже применены к ней.

Использование модели
--------------------

Теперь можно использовать модели для выполнения доступа к данным.

* Откройте файл *Program.cs*
* Замените содержимое файла следующим кодом

.. includesamplefile:: Platforms/FullNet/ConsoleApp.NewDb/Program.cs
        :language: c#
        :linenos:

* :menuselection:`Отладка --> Старт без отладки`

Вы увидите, что один блог сохраняется в базе данных и затем детали всех блогов выводятся на консоль.

.. image:: _static/output-new-db.png
