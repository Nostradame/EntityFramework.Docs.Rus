Генерирование свойств
=======================

.. contents:: В этой статье:
    :depth: 3

Модели генерирования значений
-----------------------------------------
Есть три модели генерирования значений, которые могут быть использованы для свойств.

Без генерирования значения
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Без генерирования значения означает, что вы всегда будете предоставлять действительное значение, которое будет сохранено в базе данных. Это действительное значение должно быть назначено новым сущностям, прежде чем они будут добавлены в контекст.

Генерирование значения в момент добавления
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Генерирование значения в момент добавления** означает, что значение генерируется для новых сущностей.

.. attention::
  Как именно значение генерируется для добавленных сущностей - будет зависеть от того, какой используется провайдер базы данных. Провайдеры баз данных могут автоматически настраивать генерирование значений для некоторых типов свойств, но некоторые могут потребовать от вас настройки генерирования значений вручную.

  Например, при использовании SQL Server, будут автоматически генерироваться значения для свойства `GUID` (при помощи последовательного алгоритма GUID SQL Server ). Однако, если вы определили, что свойство `DateTime` генерируется в момент добавления, то вы можете установить метод генерируемого значения (как настроить SQL значение по умолчанию `GETDATE()`, смотрите :doc:`relational/default-values`).

Если вы добавляете в контекст сущность, у которой есть свойство, определенное как первичный ключ, то EF будет пытаться вставить это значение, а не генерировать новое. Считается, что у свойства есть назначенное значение, если оно не является назначенным по умолчанию CLR (``null`` для ``string``, ``0`` для ``int``, ``Guid.Empty`` для ``Guid``, и т.д.).

В зависимости от используемого провайдера базы данных, EF может генерировать значения на стороне клиента или в базе данных. Если значение генерируется в базе данных, то когда вы добавляете сущность в контекст, EF может устанавливать временное значение. Затем это временное значение будет заменено базой данных на сгенерированное значение во время выполнения ``SaveChanges``.

Генерирование значения в момент добавления или обновления
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Генерирование значения в момент добавления или обновления** означает, что новое значение генерируется каждый раз, когда запись сохраняется (вставляется или обновляется).

.. attention::
  Как значение генерируется для добавленных и обновленных сущностей будет зависеть от используемого провайдера базы данных. Провайдеры баз данных могут автоматически устанавливать генерирование значений для некоторых типов свойств, но некоторые требуют чтобы вы вручную настраивали как генерируются значения.

  Например, если используется SQL Server, свойство `byte[]` которое установлено в момент добавления или обновления и отмечено как маркер параллелизма, будет настроено как тип данных `rowversion` - таким образом, это значение будет генерироваться в базе данных. Однако, если вы определили, что свойство `DateTime` генерируется в момент добавления или обновления, то вы должны настроить метод, при помощи которого будут генерироваться значения (такой как триггер базы данных).

Так же как и при **генерировании значения в момент добавления**, если вы определили значение для свойства вновь добавленного экземпляра сущности, то значение будет вставлено раньше, чем сгенерировано. Кроме того, если вы явно измените значение, назначенное свойству (таким образом помечая его как модифицированное), то это новое значение будет занесено в базу данных раньше, чем сгенерированное ранее значение.

Соглашения
---------------

По соглашению, первичный ключ с типом данных integer или GUID будет настроен на получение значения в момент добавления. Все другие свойства получат настройку значения без генерирования.

Аннотации данных
------------------------

Без генерирования значения (Аннотации данных)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. includesamplefile:: Modeling/DataAnnotations/Samples/ValueGeneratedNever.cs
        :language: c#
        :lines: 11-16
        :emphasize-lines: 3
        :linenos:

Генерирование значения в момент добавления (Аннотации данных)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. includesamplefile:: Modeling/DataAnnotations/Samples/ValueGeneratedOnAdd.cs
        :language: c#
        :lines: 12-18
        :emphasize-lines: 5
        :linenos:

.. attention::
  Это просто позволяет EF знать, что значения генерируются для добавленных сущностей, это не гарантирует, что для генерации значений EF будет использовать актуальный механизм. Более подробнее смотрите раздел `Генерирование значения в момент добавления`_.

Генерирование значения в момент добавления или обновления (Аннотации данных)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. includesamplefile:: Modeling/DataAnnotations/Samples/ValueGeneratedOnAddOrUpdate.cs
        :language: c#
        :lines: 12-18
        :emphasize-lines: 5
        :linenos:

.. attention::
  Это просто позволяет EF знать, что значения генерируются для добавленных или обновленных сущностей, это не гарантирует, что для генерации значений EF будет использовать актуальный механизм. Более подробнее смотрите раздел `Генерирование значения в момент добавления или обновления`_.

Fluent API
-------------------

Вы можете использовать Fluent API чтобы изменить шаблон генерирования значения  для текущего свойства.

Без генерирования значения (Fluent API)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. includesamplefile:: Modeling/FluentAPI/Samples/ValueGeneratedNever.cs
        :language: c#
        :lines: 5-21
        :emphasize-lines: 7-9
        :linenos:

Генерирование значения в момент добавления (Fluent API)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. includesamplefile:: Modeling/FluentAPI/Samples/ValueGeneratedOnAdd.cs
        :language: c#
        :lines: 6-23
        :emphasize-lines: 7-9
        :linenos:

.. attention::
  Это просто позволяет EF знать, что значения генерируются для добавленных сущностей, это не гарантирует, что для генерации значений EF будет использовать актуальный механизм. Более подробнее смотрите раздел `Генерирование значения в момент добавления`_.

Генерирование значения в момент добавления или обновления (Fluent API)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. includesamplefile:: Modeling/FluentAPI/Samples/ValueGeneratedOnAddOrUpdate.cs
        :language: c#
        :lines: 6-23
        :emphasize-lines: 7-9
        :linenos:

.. attention::
  Это просто позволяет EF знать, что значения генерируются для добавленных или обновленных сущностей, это не гарантирует, что для генерации значений EF будет использовать актуальный механизм. Более подробнее смотрите раздел `Генерирование значения в момент добавления или обновления`_.
