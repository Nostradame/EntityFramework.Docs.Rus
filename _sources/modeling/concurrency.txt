Маркеры параллелизма (Concurrency Tokens)
===================================================

Если свойство отмечено как маркер параллелизма, то EF будет проверять, что другие пользователи не будут изменять это значение в базе данных в момент сохранения измененной записи. EF использует оптимистичный шаблон параллелизма, это означает,  что если он считает, что значение не изменено, то будет пытаться сохранить данные, но выбросит исключение, если определит, что данные были изменены.

Например, мы можем захотеть настроить ``LastName`` в ``Person`` стать маркером параллелизма. Это означает, что если один пользователь пытается сохранить какие либо изменения ``Person``, а другой пользователь изменил ``LastName``, то будет выброшено исключение. Это может быть полезным, так, ваше приложение может сообщить пользователю, чтобы он перед сохранением изменений убедился, что его запись все еще соответствует актуальному ``Person``.

.. contents:: В этой статье:
    :depth: 3

Как маркеры параллелизма работают в EF
----------------------------------------------------

Хранилища данных могут применять маркеры параллелизма для того, чтобы проверять, что любая обновляющаяся или удаляемая запись содержит значение маркера, которое было назначено ему, когда контекст загрузил данные из базы данных.

Например, реляционная база данных делает это включением маркера параллелизма в раздел ``WHERE`` любой из команд ``UPDATE`` или ``DELETE`` и проверяя число затронутых строк. Если маркер все еще соответствует, то эта строка будет обновлена. Если значение в базе данных было изменено, то строки не будут обновлены.

.. code-block:: sql

    UPDATE [Person] SET [FirstName] = @p1
    WHERE [PersonId] = @p0 AND [LastName] = @p2;

Соглашения
---------------

По соглашениям, свойства никогда не конфигурируются как маркеры параллелизма.

Аннотации данных
------------------------

Вы можете использовать аннотацию данных для настройки свойств в качестве маркера параллелизма.

.. includesamplefile:: Modeling/DataAnnotations/Samples/Concurrency.cs
        :language: c#
        :lines: 11-17
        :emphasize-lines: 4
        :linenos:

Fluent API
-------------------

Вы можете использовать Fluent API для настройки свойств в качестве маркера параллелизма.

.. includesamplefile:: Modeling/FluentAPI/Samples/Concurrency.cs
        :language: c#
        :lines: 5-22
        :emphasize-lines: 7-9
        :linenos:

Метка времени / версия строки
----------------------------------------

Метка времени это свойство, в котором новое значение генерируется базой данных каждый раз, когда вставляется или модифицируется строка. Это свойство также рассматривается как маркер параллелизма. Это гарантирует, что вы получите исключение, если с того времени, как вы запросили данные, кто-нибудь еще изменил строку, которую вы пытаетесь обновить.

Как именно это достигается - остается за тем провайдером, который используется. В SQL Server, метка времени обычно используется для свойства ``byte[]``, и будет представлена в базе данных как столбец ``ROWVERSION``.

Соглашения
^^^^^^^^^^^^

По соглашениям, свойства никогда не конфигурируются как метки времени.

Аннотации данных
^^^^^^^^^^^^^^^^^^

Вы можете использовать аннотацию данных для настройки свойств в качестве метки времени.

.. includesamplefile:: Modeling/DataAnnotations/Samples/Timestamp.cs
        :language: c#
        :lines: 11-18
        :emphasize-lines: 6
        :linenos:

Fluent API
^^^^^^^^^^^^^^

Вы можете использовать Fluent API для настройки свойств в качестве метки времени.

.. includesamplefile:: Modeling/FluentAPI/Samples/Timestamp.cs
        :language: c#
        :lines: 5-23
        :emphasize-lines: 7-10
        :linenos:
