Скрытые свойства
================

Скрытые свойства это свойства, которых нет в вашем классе сущности. Значение и состояние этих свойств сохраняется исключительно в треккере изменений.

Значения скрытых свойств можно получить и изменить при помощи API ``ChangeTracker``.

.. code-block:: csharp

    context.Entry(myBlog).Property("LastUpdated").CurrentValue = DateTime.Now;

В LINQ запросах можно ссылаться на скрытые сойства через статический метод ``EF.Property``.

.. code-block:: csharp

    var blogs = context.Blogs
        .OrderBy(b => EF.Property<DateTime>(b, "LastUpdated"));

.. contents:: В этой статье:
    :depth: 3

Соглашения
----------

По соглашениям, скрытые свойства создаются только тогда, когда обнаруживается связь, но в зависимом классе сущностей не найдено свойство являющееся внешним ключом. В этом случае, будет введено скрытое свойство, являющееся внешним ключом, с именем ``<имя основного типа><имя свойства основного ключа>``.

Например, в результате выполнения следующего кода, в сущность ``Post`` будет введено скрытое свойство ``BlogBlogId``.

.. includesamplefile:: Modeling/Conventions/Samples/ShadowForeignKey.cs
        :language: c#
        :lines: 6-27
        :linenos:

Аннотации данных
----------------

Скрытые свойства не могут быть созданы при помощи аннотаций данных.

Fluent API
----------

Вы можете использовать Fluent API для настройки скрытых свойств. Как только вы вводите строку, перезагружающую ``Property``, вы можете связать любой вызов конфигурации с каким угодно свойством.

Если поддерживается метод ``Property`` с именем, соответствующим имени существующего свойства (скрытого или определенного в классе сущности), то код будет кофигурировать существующее свойство, а не вводить новое скрытое свойство.

.. includesamplefile:: Modeling/FluentAPI/Samples/ShadowProperty.cs
        :language: c#
        :lines: 6-21
        :emphasize-lines: 7-8
        :linenos:
