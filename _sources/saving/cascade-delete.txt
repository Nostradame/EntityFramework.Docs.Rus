Каскадное удаление
========================

Каскадное удаление позволяет при удалении основных/родительских сущностей получить такой же эффект для зависимых/потомственных сущностей.

Есть три модели поведения каскадного удаления:
  * **Cascade:** Зависимые сущности также будут удалены.
  * **SetNull:** Свойства внешнего ключа в зависимых сущностях устанавливаются в значение null.
  * **Restrict:** Операция удаления не применяется к зависимой сущности. Зависимые сущности остаются неизменными.

Более подробную информацию о соглашениях и конфигурации каскадного удаления смотрите в :doc:`/modeling/relationships`.

.. contents:: `В этой статье:`
    :local:

.. include:: /_shared/sample.txt
.. _пример: https://github.com/aspnet/EntityFramework.Docs/tree/master/samples/Saving/Saving/CascadeDelete/

Каскадные операции для отслеживаемых сущностей
-----------------------------------------------------------------

Когда вы вызываете `SaveChanges`, правила каскадного удаления могут быть применены к любым сущностям, которые отслеживаются контекстом.

Рассмотрим простую модель `Blog` и `Post`, где требуются отношения между двумя сущностями. По соглашениям. каскадное поведение для этих отношений установлено в `Cascade`.

Следующий код загружает Blog и все его зависимые Posts из базы данных (используя метод `Include`). Затем код удаляет Blog.

.. includesamplefile:: Saving/Saving/CascadeDelete/Sample.cs
        :language: c#
        :lines: 30-35
        :linenos:

Из-за того, что Posts отслеживается контекстом, каскадное поведение применяется к ним после сохранения базы данных. Поэтому EF выдает команду `DELETE` для каждого объекта.

::

  DELETE FROM [Post]
  WHERE [PostId] = @p0;
  DELETE FROM [Post]
  WHERE [PostId] = @p1;
  DELETE FROM [Blog]
  WHERE [BlogId] = @p2;

Каскадные операции для неотслеживаемых сущностей
-------------------------------------------------------------------

Следующий код является почти таким же, как наш предыдущий пример, за исключением того, она не загружает соответствующие Posts из базы данных.

.. includesamplefile:: Saving/Saving/CascadeDelete/Sample.cs
  :language: c#
  :lines: 52-57
  :linenos:

Так как Posts не отслеживаются контекстом, оператор `DELETE` выдается только для `Blog`. Это зависит от соответствующего каскадного поведения, присутствующего в базе данных, чтобы убедиться, что данные, которые не отслеживается контекстом также удаляются. Если для создания базы данных вы используете EF, то для вас будет установлено такое каскадное поведение.

::

  DELETE FROM [Blog]
  WHERE [BlogId] = @p0;
