Транзакции
==========

Транзакции позволяют разным базам данных обрабатывать операции атомарного типа. Если транзакция совершается, все операции успешно применяются к базе данных. Если выполняется откат транзакции, ни одна из операций не применяется к базе данных.

.. contents:: `В этой статье:`
    :depth: 2
    :local:

.. include:: /_shared/sample.txt
.. _пример: https://github.com/aspnet/EntityFramework.Docs/tree/master/samples/Saving/Saving/Transactions/

Поведение транзакций по умолчанию
---------------------------------

По умолчанию, если поставщик базы данных поддерживает транзакции, все изменения в одном вызове ``SaveChanges()`` применяются в транзакции. Если какое-либо из изменений не получилось, то выполняется откат транзакции и ни одно из изменений не применяется к базе данных. Это означает, что ``SaveChanges()`` гарантирует либо полный успех, либо при возникновении ошибки базы данных оставить все без изменений.

Для большинства приложений такого поведения по умолчанию вполне достаточно. Вы должны контролировать транзакции вручную только если это требуется приложению.

Управление транзакциями
-----------------------

Вы можете использовать ``DbContext.Database`` API для начала, совершения, и отката транзакций. В следующем примере показаны две операции ``SaveChanges()`` и LINQ запрос, выполненные в одной транзакции.

Не все провайдеры баз данных поддерживают транзакции. Некоторые провайдеры могут генерировать исключения или игнорировать операцию при вызове API транзакций.

.. includesamplefile:: Saving/Saving/Transactions/ControllingTransaction/Sample.cs
        :language: c#
        :lines: 17-42
        :emphasize-lines: 3, 17-19
        :linenos:

Кросс-контекстные транзакции (только реляционные базы данных)
-------------------------------------------------------------

Вы можете также разделить транзакции между несколькими экземплярами контекста. Эта функциональность доступна только при использовании провайдера реляционной базы данных, поскольку она требует использования ``DbTransaction`` и ``DbConnection``, которые являются специфическими для реляционных баз данных.

Для того, чтобы разделить транзакцию, контексты должны разделять как ``DbConnection`` так и ``DbTransaction``.

Разрешение внешне предоставляемого подключения
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Разделение ``DbConnection`` требует возможности передать подключение в контекст при его создании.

Простейший путь позволить ``DbConnection`` быть внешне обеспеченным, это перестать использовать метод ``DbContext.OnConfiguring`` для настройки контекста, а внешне создать ``DbContextOptions`` и передать его в конструктор контекста.

.. tip::
  ``DbContextOptionsBuilder`` это API, которые вы использовали в ``DbContext.OnConfiguring`` для настройки контекста, теперь вы собираетесь использовать его внешне, для создания``DbContextOptions``.

.. includesamplefile:: Saving/Saving/Transactions/SharingTransaction/Sample.cs
        :language: c#
        :lines: 58-65
        :emphasize-lines: 3-5
        :linenos:

Альтернативой является продолжать использовать ``DbContext.OnConfiguring``, принять сохраненный ``DbConnection`` и использовать в ``DbContext.OnConfiguring``.

.. code-block:: c#

  public class BloggingContext : DbContext
  {
      private DbConnection _connection;

      public BloggingContext(DbConnection connection)
      {
        _connection = connection;
      }

      public DbSet<Blog> Blogs { get; set; }

      protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
      {
          optionsBuilder.UseSqlServer(_connection);
      }
  }

Разделение соединения и транзакций
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Вы можете создавать сложные экземпляры контекста, которые разделяют одно и то же соединение. Затем используйте ``DbContext.Database.UseTransaction(DbTransaction)`` API чтобы задействовать оба контекста в одной и той же транзакции.

.. includesamplefile:: Saving/Saving/Transactions/SharingTransaction/Sample.cs
        :language: c#
        :lines: 24-55
        :emphasize-lines: 1-3, 7, 16, 23-25
        :linenos:

Использование внешнего DbTransactions (только реляционые базы данных)
---------------------------------------------------------------------

Если вы используете несколько технологий доступа к данным для доступа к реляционной базе данных, вы можете разделить транзакции между операциями, выполняемыми этими различными технологиями.

Следующем примере показано, как выполнить операции ADO.NET SqlClient и Entity Framework Core в одной и той же транзакции.

.. includesamplefile:: Saving/Saving/Transactions/ExternalDbTransaction/Sample.cs
        :language: c#
        :lines: 21-53
        :emphasize-lines: 4, 10, 21, 26-28
        :linenos:
