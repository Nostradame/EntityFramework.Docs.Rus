Тестирование InMemory
=========================

Эта статья охватывает как пользоваться провайдером InMemory для написания эффективных тестов с минимальным воздействием на проверяемый код.

.. attention::
  В настоящее время необходимо использовать ``ServiceCollection`` и ``IServiceProvider`` для управления областью базы данных InMemory, которая добавляет сложности к тестам. Это будет улучшено в следующем релизе после RC2, чтобы сделать это проще, `для получения более подробной информации смотрите issue #3253 <https: github.com/aspnet/entityframework/issues/3253>`_.

.. contents:: `В этой статье:`
    :depth: 2
    :local:

.. include:: /_shared/sample.txt
.. _пример: https://github.com/aspnet/EntityFramework.Docs/tree/master/samples/Miscellaneous/Testing

Когда следует использовать InMemory для тестирования
-----------------------------------------------------------------------

InMemory провайдер бывает полезным, когда вы хотите проверить компоненты, используя похожее подключении к реальной базе, без затрат на операции фактической базы данных.

Например рассмотрим следующую службу, которая позволяет коду приложения выполненять некоторые операций, связанные с блогом. Внутренне она использует ``DbContext`` который соединяется с базой данных SQL Server. Было бы полезно поменять этот контекст для подключения к базе InMemory, так что мы можем писать эффективные тесты для этой службы без необходимости изменения кода, или много поработать для создания двойного теста контекста.

.. includesamplefile:: Miscellaneous/Testing/BusinessLogic/BlogService.cs
        :language: csharp
        :linenos:
        :lines: 6-29

InMemory это не реляционная база данных
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Провайдеры баз данных EF Core не должны быть реляционными. InMemory предназначена для общего использования как база данных для тестирования и не предназначена для имитации реляционной базы данных.

Некоторые примеры этого:
 * InMemory позволит вам сохранить данные, которые будут нарушать ограничения ссылочной целостности в реляционной базе данных.
 * Если в своей модели вы используете свойство DefaultValueSql(string), то это реляционные API и они не будут иметь никакого эффекта при запуске в InMemory.

.. tip::
  Для многих испытаний эти различия не будет иметь значения. Однако если вы хотите проверить что-то, что ведет себя скорее как истинная реляционная база данных, рекомендуется использовать `режим SQLite в памяти <http://www.sqlite.org/inmemorydb.html>`_.

Подготовка контекста
---------------------------

Избежание настройки двух провайдеров баз данных
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

В своих тестах вам нужно настроить контекст извне для использования провайдера InMemory. Если вы настраиваете провайдера базы данных путем переопределения ``OnConfiguring`` в вашем контексте, то вам нужно добавить некоторые условный код, чтобы настроить провайдера базы данных, только если он еще не был настроен.

.. note::
  Если вы используете ASP.NET Core, то вам не нужен этот код, так как поставщик базы данных настроен вне контекста (в Startup.cs).

.. includesamplefile:: Miscellaneous/Testing/BusinessLogic/BloggingContext.cs
        :language: csharp
        :linenos:
        :lines: 17-23
        :emphasize-lines: 3

Добавление конструктора для тестирования
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Самый простой способ тестирования с провайдером InMemory это изменение контекста чтобы предоставлять конструктор, который принимает ``DbContextOptions<TContext>``.

.. includesamplefile:: Miscellaneous/Testing/BusinessLogic/BloggingContext.cs
        :language: csharp
        :linenos:
        :lines: 7-14
        :emphasize-lines: 6-8

.. note::
  ``DbContextOptions<TContext>`` передает контексту все его параметры, такие как база данных для подключения. Это тот же самый объект, созданный при выполнении метода OnConfiguring в вашем контексте.

Запись тестов
----------------------

Ключом к тестированию с этим провайдером является возможность передать контексту для использования провайдера InMemory и контролировать области базы данных в памяти. Обычно вам нужна чистая база данных для каждого метода теста.

``DbContextOptions<TContext>`` предоставляет метод ``UseInternalServiceProvider`` , который позволяет нам управлять - какой контекст будет использовать ``IServiceProvider``. ``IServiceProvider`` — это контейнер, который будет содержать все сервисы от EF (включая экземпляр базы данных InMemory). Как правило, EF создает один ``IServiceProvider`` для всех контекстов данного типа в AppDomain - что означает, что все экземпляры контекста совместно используют один и тот же экземпляр базы данных InMemory. Позволяя единственный объек для передачи, можно управлять областью базы данных InMemory.

Вот пример тестового класса, который использует базу InMemory. Каждый метод теста создает новый ``DbContextOptions<TContext>`` с новым ``IServiceProvider``, что означает, что каждый метод имеет собственную базу данных InMemory.

.. includesamplefile:: Miscellaneous/Testing/TestProject/BlogServiceTests.cs
        :language: csharp
        :linenos:

Совместное использование экземпляра базы данных для тестов, доступных только для чтения
------------------------------------------------------------------------------------------------------------------

Если в классе теста есть тесты только-для-чтения, которые используют одни и те же данные для заполнения, то вы можете совместно использовать экземпляр базы данных InMemory для всего класса (а не создавать новый для отдельного метода). Это означает, что у вас есть один ``DbContextOptions<TContext>`` и ``IServiceProvider`` для всего класса теста, а не для каждого метода.

.. includesamplefile:: Miscellaneous/Testing/TestProject/BlogServiceTestsReadOnly.cs
        :language: csharp
        :linenos:
