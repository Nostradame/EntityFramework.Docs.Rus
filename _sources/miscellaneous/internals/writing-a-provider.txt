Разработка провайдера базы данных
=======================================

.. contents:: `В этой статье:`
  :local:

EF Core разрабатывался расширяемым. Он предоставляет компонеты, предназначенные для использования в нескольких провайдерах. Цель данной статьи состоит в том, чтобы обеспечить базовое руководство по созданию нового провайдера, совместимого с EF Core.

.. tip::
  `Исходный код EF Core это открытый ресурс <https://github.com/aspnet/EntityFramework>`_.
  Лучший источник информации - это сам код.

.. tip::
  This article shows snippets from an empty EF provider. Вы можете просмотреть `полностью
  разработанный провайдер
  <https://github.com/aspnet/EntityFramework.Docs/tree/master/samples/Miscellaneous/Internals/WritingAProvider>`_
  на GitHub.

.. _entry-point:

Инициализация DbContext
---------------------------------

Взаимодействие пользователя и EF начинается с конструктора ``DbContext``. Перед тем как контекст становится доступен для использования, он инициализирует **опции** и **сервисы**.
Мы посмотрим пример обоих из них, чтобы понять, что они представляют, и как они настраиваются на использование различных провайдеров.

Опции
^^^^^^^^^^^

``Microsoft.EntityFrameworkCore.Infrastructure.DbContextOptions`` это API для конфигурирования ``DbContext`` **пользователями**. Разработчики провайдеров ответственны за создание API для конфигурирования опций и создание сервисов,
соответствующих этим опциям. Например, большинству провайдеров необходима строка подключения. Эта опция обычно создается при помощи ``DbContextOptionsBuilder``.

Сервисы
^^^^^^^^^^^^^^

``System.IServiceProvider`` это основной интерфейс, используемый для взаимодействия с сервисами.
EF интенсивно использует `внедрение зависимостей (DI)
<https://wikipedia.org/wiki/Dependency_injection>`_. ``ServiceProvider`` содержит коллекцию серисов, доступных для внедрения. Инициализация использует 
``DbContextOptions`` чтобы добавить дополнительные сервисы, если это необходимо, и выбрать коллекцию сервисов, которые будут использовать все операции EF во время выполнения.

Так же смотрите :doc:`services`.

.. note::
  EF использует `Microsoft.Extensions.DependencyInjection <https://www.nuget.org/packages/Microsoft.Extensions.DependencyInjection/>`_
  для реализации внедрения зависимостей. Документация для этого проекта
  `доступна на docs.asp.net <https://docs.asp.net/en/latest/fundamentals/dependency-injection.html>`_.

Разработка плагинов для провайдера
--------------------------------------------------------

Как объяснялось выше, EF использует опции и сервисы. Каждый провайдер должен создать API
которые используются для добавления опций и сервисов, специфичных для провайдера. Такие API лучше создавать
используя методы расширения.

.. tip::
  При определении метода расширения, определите его в пространстве имен
  расширяемого объекта, так, авто завершение Visual Studio будет содержать
  метод расширения как возможное решение.

Метод `Use`
^^^^^^^^^^^^^^^^

По соглашению, провайдеры определяют расширение ``UseX()`` в ``DbContextOptionsBuilder``.
Оно конфигурирует **опции**, которые обычно передает в метод как аргументы.

::

  optionsBuilder.UseMyProvider("Server=contoso.com")

Метод расширения ``UseX()`` создает специфичную для провайдера реализацию
``IDbContextOptionsExtension``, которая добавляется в коллекцию расширений,
хранящихся в ``DbContextOptions``. Это делается путем вызова скрытых API
``IDbContextOptionsBuilderInfrastructure.AddOrUpdateExtension``.

.. includesamplefile:: Miscellaneous/Internals/WritingAProvider/EntityFrameworkCore.ProviderStarter/Extensions/MyProviderDbContextOptionsExtensions.cs
  :language: csharp
  :caption: Пример реализации метода "Use"
  :linenos:
  :lines: 6-19

.. tip::
  Метод ``UseX()`` так же может быть использован для возвращения специальной обертки вокруг
  ``DbContextOptionsBuilder``, которая позволяет пользователям конфигурировать несколько опций
  методом поточного вызова. Смотрите ``SqlServerDbContextOptionsBuilder`` в качестве примера.

Метод `Add`
^^^^^^^^^^^^^^^^

По соглашению, провайдер определяет расширение ``AddX()`` объекта ``EntityFrameworkServicesBuilder``. Он конфигурирует **сервисы** и не принимает аргументы.

``EntityFrameworkServicesBuilder`` является оберткой ``ServiceCollection``, который доступен через вызов ``GetInfrastructure()``. Метод ``AddX()`` должен регистрировать сервисы в этой коллекции чтобы они стали доступны для внедрения зависимостей.

В некоторых случаях пользователи могут непосредственно вызвать метод `Add`. Это делается, когда пользователи конфигурируют провайдера сервисов вручную и используют этого провайдера сервисов, чтобы решить экземпляр ``DbContext``. В других случаях, EF вызывает метод `Add` при инициализации сервиса. Для получения более подробной информации об инициализации сервиса смотрите раздел :doc:`services`.

Провайдер **должен зарегистрировать** реализацию ``IDatabaseProvider``.
Его реализация по очереди потребует настройки еще нескольких необходимых сервисов.
Подробнее о работе с сервисами читайте в разделе :doc:`services`.

EF предоставляет много полных или частичных реализаций необходимых сервисов, чтобы разработчики провайдеров могли делать это проще. Например, EF включает в себя класс ``DatabaseProvider<TProviderServices, TOptionsExtension>``, который может быть использован в регистрации сервисов для подключения провайдера.

.. includesamplefile:: Miscellaneous/Internals/WritingAProvider/EntityFrameworkCore.ProviderStarter/Extensions/MyProviderServiceCollectionExtensions.cs
  :language: csharp
  :linenos:
  :caption: Пример реализации метода "Add"
  :lines: 12-36

Следующие шаги
--------------

Сейчас с этими двумя определенными API расширяемости, пользователи могут конфигурировать "DbContext" для использования вашего провайдера. Для того, чтобы ваш провайдер функционировал, вам необходимо будет реализовать другие сервисы.

Чтение исходного кода других провайдеров является отличным способом узнать, как создать нового провайдера EF. Список существующих провайдеров EF и ссылки на их исходный код (если они доступны) смотрите в разделе :doc:`/providers/index`.

``Microsoft.EntityFrameworkCore.Relational`` включает в себя обширную библиотеку сервисов, предназначенных для реляционных провайдеров. Во многих случаях эти сервисы требуют небольшой или вообще никакой модификации для работы нескольких реляционных баз данных.

Для получения более подробной информации о других внутренних частях EF, смотрите в разделе :doc:`index`
