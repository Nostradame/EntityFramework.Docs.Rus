Понимание сервисов EF
=========================

.. contents:: `В этой статье:`
  :local:
  :depth: 2

Entity Framework работает как набор совместно действующих сервисов. Сервис - это многократно используемый компонент. Сервис, как правило, является реализацией интерфейса. Сервисы доступны для других сервисов при помощи `внедрения зависимостей (DI) <https://wikipedia.org/wiki/Dependency_injection>`_, который реализуется в EF при помощи `Microsoft.Extensions.DependencyInjection <https://docs.asp.net/en/latest/fundamentals/dependency-injection.html>`_.

В данной статье рассматриваются некоторые основополагающие принципы для понимания того, как EF использует сервисы и DI.

Термины
-------

**Сервис**
  Повторно используемый компонент. Сервис в .NET идентифицирован классом или интерфейсом.
  По соглашению Entity Framework использует интерфейсы только для идентификации сервисов.

**Жизненный цикл сервиса**
  Описание того, каким образом сервис сохраняет и удаляет данные во время многократного использования
  одного и того же типа сервиса.

**Провайдер сервиса**
  Механизм для хранения коллекции сервисов. Также известен как контейнер сервисов.

**Коллекция сервисов**
  Механизм создания провайдера сервиса.

Категории сервисов
------------------

Сервисы делятся на одну или более категорий.

**Сервисы контекста**
  Услуги, которые связаны с определенным экземпляром ``DbContext``. Они
  предоставляют функциональные возможности для работы с моделью пользователя и параметрами контекста.

**Сервисы провайдеров**
  Провайдер-специфичные реализации сервисов. Например, SQLite использует
  “сервисы провайдера” для настройки поведения SQL генераций, миграций 
  и файлового ввода-вывода.

**Сервисы стадии проектирования**
  Сервисы, используемые в то время, когда разработчик создает приложение. Например,
  команды EF используют сервисы на стадии проектирования для выполнения миграций и генерирования кода 
  (так же известные как скаффолдинг).

**Сервисы пользователя**
  Пользователь может определять пользовательские сервисы для взаимодействия с EF. Они разрабатыватся в
  коде приложения, а не в коде провайдера. Например, пользователь может предоставить
  реализацию ``IModelCustomizer`` для управления тем, как создается модель.

.. note::
  Провайдера сервиса не следует путать с "сервисом провайдеров".

Жизненный цикл сервиса
----------------------

Службы EF могут быть зарегистрированы с различными опциями жизненного цикла. Подходящий вариант зависит от того, как сервис используется и реализован.

**Transient**
  Жизненный цикл сервиса Transient создается каждый раз, когда он вводится в другие
  сервисы Это изолирует каждый экземпляр сервиса. Например,
  ``MigrationsScaffolder`` не должен многократно использоваться, поэтому он регистрируется как
  **Transient**.

**Scoped**
  Жизненный цикл сервиса Scoped создается для каждого экземпляра ``DbContext``. Это
  используется для изоляции экземпляра ``DbContext``. Например, ``StateManager``
  добавляется как **Scoped**, потому что он должен отслеживать состояние сущности только для одного контекста.

**Singleton**
  Сервис с жизненным циклом **Singleton** существует в единственном экземпляре для каждого провайдера сервиса и охватывает все
  области. Каждый раз, когда вводится сервис, используется один и тот же экземпляр. Например,
  ``IModelCustomizer`` это **Singleton**, потому что он является идемпотентным, что означает,
  что каждый вызов ``IModelCustomizer.Customize()`` не меняет настройки.

Как работает AddDbContext
-------------------------

EF предоставляет метод расширения ``AddDbContext<TContext>()`` для
добавления использования EF в коллекции сервисов. Этот метод добавляет в коллекцию сервисов следующее:

 - ``TContext`` как "scoped"
 - ``DbContextOptions`` как "singleton"
 - ``DbContextOptionsFactory<T>`` как "singleton"

``AddDbContext`` не добавляет в коллекцию сервисов сервисы контекста, сервисы провайдера, сервисы времени разработки (за исключением случаев, описанных в разделе `Особые случаи`_). Для этого DbContext строит свой собственный внутренний провайдер сервиса.

Особые случаи
~~~~~~~~~~~~~

``AddDbContext`` добавляет ``DbContextOptionsFactory<T>`` в коллекцию сервисов, вызываемых AddDbContext (которые используются для создания "внешнего" провайдера сервиса). ``DbContextOptionsFactory<T>`` выступает в качестве моста между внешним провайдером сервиса и внутренним провайдером сервиса в DbContext. Если у внешнего поставщика есть сервисы для ``ILoggerFactory`` или ``IMemoryCache``, то они будут добавлены к внутреннему провайдеру сервиса.

Для таких распространенных сценариев есть реализованные соединения, так что пользователи могут легко настроить логгирование и кэширование памяти без необходимости предоставления специализированного внутреннего провайдера сервисов.

Внутренний провайдер сервиса в DbContext
----------------------------------------

По умолчанию, ``DbContext`` использует внутренний провайдер сервиса, который в приложении **отделен** от всех других провайдеров сервисов. Этот внутренний провайдер сконструирован из экземпляра ``DbContextOptions``. Такие методы, как ``UseSqlServer()`` расширяют конструирование, добавляя специализированные сервисы для своей системы баз данных.

Предоставление пользовательского внутреннего провайдера сервиса
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

'' DbContextOptionsBuilder'' предоставляет API для передачи в DbContext пользовательского провайдера сервиса для внутреннего исользования в EF. Эти API называются ``DbContextOptions.UseInternalServiceProvider(провайдер IServiceProvider)``.

Если предоставлен пользовательский провайдер сервиса, DbContext не будет использовать ``DbContextOptions`` для создания своего собственного внутреннего провайдера сервисов. В пользовательский провайдер уже должен быть добавлен провайдер сервиса.

Разработчики провайдера базы данных должны предоставить методы, такие как "AddEntityFrameworkSqlServer" или "AddEntityFrameworkSqlite" для упровщения процесса создания пользовательского контейнера сервисов.

.. code-block:: csharp

  var services = new ServiceCollection()
      .AddEntityFrameworkSqlServer()
      .AddSingleton<MyCustomService>()
      .BuildServiceProvider();

  var options = new DbContextOptionsBuilder();

  options
      .UseInternalServiceProvider(services)
      .UseSqlServer(connectionString);

  using (var context = new DbContext(options))
  { }

Кэширование провайдера сервиса
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

EF кэширует эти внутренние провайдеры сервисов с ключом ``IDbContextOptions``.
Это означает что провайдер сервисов создается только один раз для каждого уникального набора параметров.
Он используется повторно, когда DbContext создается при помощи набора параметров, которые уже были использованы во время существования приложения.

Требования к провайдерам сервисов
---------------------------------

Провайдеры баз данных EF должны регистрировать основные наборы сервисов. Эти необходимые сервисы определены как свойства ``IDatabaseProviderServices``. Разработчики провайдеров могут нуждаться в реализации некоторых сервисов с нуля. В других есть частичная или полная реализация библиотек EF которые могут быть использоавны повторно.

Дополнительную информацию о требованиях к провайдерам сервисов смотрите в разделе :doc:`writing-a-provider`.

Дополнительная информация
-------------------------

Для реализации DI, EF использует `библиотеку Microsoft.Extensions.DependencyInjection <https://www.nuget.org/packages/Microsoft.Extensions.DependencyInjection/>`_. Документация по этой библиотеке `доступна на docs.asp.net
<https://docs.asp.net/en/latest/fundamentals/dependency-injection.html>`_.

`"System.IServiceProvider"
<http://dotnet.github.io/api/System.IServiceProvider.html>`_ определен в библиотеке базовых классов .NET.
