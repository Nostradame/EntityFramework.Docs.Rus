Строка подключения
==================

Большинству провайдеров баз данных требуется какая-нибудь форма строки подключения для соединения с базой данных. Иногда эта строка подключения содержит конфиденциальные сведения, которые необходимо защищать. Также может потребоваться изменить строку подключения при перемещении вашего приложения в другие среды, например, разработки, тестирования и производства.

.. contents:: `В этой статье:`
    :depth: 2
    :local:

Full .NET приложения
--------------------

В Full .NET приложениях, таких как WinForms, WPF, Console, и ASP.NET 4, есть испытанный и проверенный шаблон строки подключения. Следует добавлять строку подключения в файл приложения App.config (Web.config при использовании ASP.NET). Если строка подключения содержит конфиденциальную информацию, например имя пользователя и пароль, вы можете защитить содержимое файла конфигурации с помощью `Настроек защиты <https://msdn.microsoft.com/en-us/library/53tyfkaw.aspx>`_.

.. code-block:: xml
    :linenos:

    <?xml version="1.0" encoding="utf-8"?>
    <configuration>

      <connectionStrings>
        <add name="BloggingDatabase"
             connectionString="Server=(localdb)\mssqllocaldb;Database=Blogging;Trusted_Connection=True;" />
      </connectionStrings>
    </configuration>

.. note::
    Настройка ``providerName`` не обязательна для строки подключения EF Core в App.config, т.к. провайдер базы данных настраивается в коде.

Затем вы можете прочитать строку подключения при помощи API ``ConfigurationManager`` в методе контекста ``OnConfiguring``. Вам может понадобиться добавить ссылку на сборку каркаса ``System.Configuration`` чтобы получить возможность использовать эти API.

.. code-block:: c#
    :linenos:

    public class BloggingContext : DbContext
    {
        public DbSet<Blog> Blogs { get; set; }
        public DbSet<Post> Posts { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
          optionsBuilder.UseSqlServer(ConfigurationManager.ConnectionStrings["BloggingDatabase"].ConnectionString);
        }
    }

Universal Windows Platform (UWP)
--------------------------------

Строка подключения в приложении UWP обычно подключает к SQLite, и просто определяет имя файла. Она обычно не содержат конфиденциальную информацию и не требует изменения, когда приложение развертывается. Таким образом, эти строки подключения хороши, чтобы быть оставлеными в коде, как показано ниже. Если позже вы захотите переместить их из кода, UWP поддерживает концепцию настроек, подробнее смотрите `Раздел документации UWP App Settings <https://msdn.microsoft.com/windows/uwp/app-settings/store-and-retrieve-app-data>`_.

.. code-block:: c#
    :linenos:

    public class BloggingContext : DbContext
    {
    	public DbSet<Blog> Blogs { get; set; }
    	public DbSet<Post> Posts { get; set; }

    	protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    	{
    		optionsBuilder.UseSqlite("Filename=Blogging.db");
    	}
    }


ASP.NET Core
------------

В ASP.NET Core очень гибкая система конфигурации, и в ``appsettings.json`` могут храниться строки подключения, переменные среды выполнения, конфидециальная информация пользователя, или другие конфигурационные ресурсы. Для получения более подробной информации смотрите `раздел Configuration документации ASP.NET Core <https://docs.asp.net/en/latest/fundamentals/configuration.html>`_. Следующий пример показывает строку подключения, сохраненную в ``appsettings.json``.

.. code-block:: json
    :linenos:

    {
      "ConnectionStrings": {
        "BloggingDatabase": "Server=(localdb)\\mssqllocaldb;Database=EFGetStarted.ConsoleApp.NewDb;Trusted_Connection=True;"
      },
    }

Контекст обычно настраивается в ``Startup.cs`` а строка подключения читается из конфигурации. Обратите внимание что метод ``GetConnectionString()``  просто ищет значения конфигурации, ключ которого равен ``ConnectionStrings:<connection string name>``.

.. code-block:: c#
    :linenos:

    public void ConfigureServices(IServiceCollection services)
    {
        services.AddDbContext<BloggingContext>(options =>
            options.UseSqlServer(Configuration.GetConnectionString("BloggingDatabase")));
    }
