.NET Core CLI
=============

Средства командной строки EF для интерфейса командной строки .NET Core (CLI).

.. contents:: `В этой статье:`
    :depth: 2
    :local:

.. note::
    Известные проблемы для средства командной строки .NET Core CLI. Подробнее смотрите `Известные проблеммы Preview 2`_.

Установка
------------------

Необходимые условия
~~~~~~~~~~~~~~~~~~~

Инструментам командной строки EF требуется .NET Core CLI Preview 2 или новее. Чтобы получить инструкции по установке, смотрите веб-сайт `.NET Core <https://www.microsoft.com/net/core>`_.

Поддерживаемые каркасы
~~~~~~~~~~~~~~~~~~~~~~

EF поддерживает команды .NET Core CLI этих фреймворков:

 - .NET Framework 4.5.1 и новее. ("net451", "net452", "net46", etc.)
 - .NET Core App 1.0. ("netcoreapp1.0")

Установка редактированием project.json
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Средства командной строки EF для .NET Core CLI устанавливаются вручную редактированием ``project.json``.

1. Добавьте ``Microsoft.EntityFrameworkCore.Tools`` как "tool", а ``Microsoft.EntityFrameworkCore.Design`` как встроенную зависимость в "dependencies". Смотрите пример project.json ниже.
2. Выполните команду ``dotnet restore``. Если не удается восстановить, то может быть средства командной строки не установлены правильно.

Полученный project.json должен включать эти элементы (помимо других зависимостей проекта).

.. code-block:: json

    {
        "dependencies": {
            "Microsoft.EntityFrameworkCore.Design": {
                "type": "build",
                "version": "1.0.0-preview2-final"
            }
        },

        "tools": {
            "Microsoft.EntityFrameworkCore.Tools": "1.0.0-preview2-final"
        },

        "frameworks": {
            "netcoreapp1.0": { }
        }
    }

.. tip::
    Встоенная зависимость (``"type": "build"``) означает, что эта зависимость является локальной для текущего проекта. Например, если в проекте A есть build only dependency, а проект B зависит от A, то команда ``dotnet restore`` не добавит build-only dependencies проекта А в проект B.

Применение
----------
Команды можно запускать из командной строки, перейдя в каталог проекта и выполнив ``dotnet ef [субкоманда]``. Чтобы посмотреть информацию об использовании, получить подробную информацию о параметрах и субкомандах, добавьте к любой команде ``--help``.

dotnet-ef
~~~~~~~~~
.. code-block:: none

    Применение: dotnet ef [опции] [команда]

    Опции:
      -h|--help                           Показывает справочную информацию
      -p|--project <PROJECT>              Выбраннй проект (по умолчанию это проект в текущей директории). Может быть путем до project.json или директории проекта.
      -s|--startup-project <PROJECT>      Путь к проекту, содержащий Startup (по умолчанию выбранный проект). Может быть путем до project.json или директории проекта.
      -c|--configuration <CONFIGURATION>  Конфигурация, под которой будет загрузка (по умолчанию - Debug)
      -f|--framework <FRAMEWORK>          Выбор загружаемого из запуска проекта каркаса (по умолчанию- каркас, максимально совместимый с .NETCoreApp,Version=v1.0).
      -b|--build-base-path <OUTPUT_DIR>   Директория поиска временного вывода.
      -o|--output <OUTPUT_DIR>            Директория поиска вывода

    Команды:
      database    Команды для управления базой данных
      dbcontext   Команды для управления типами DbContext
      migrations  Команды для управления миграциями

dotnet-ef-database
~~~~~~~~~~~~~~~~~~

.. code-block:: text

    Применение: dotnet ef database [опции] [команда]

    Опции:
      -h|--help     Показать справочную информацию
      -v|--verbose  Включить подробный вывод

    Команды:
      drop    Сбросить базу данных для конкретной среды
      update  Обновление базы данных до указанной миграции

dotnet-ef-database-drop
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: text

    Применение: dotnet ef database drop [опции]

    Опции:
      -e|--environment <environment>  Используемая среда. Если этот параметр опущен, используется "Development".
      -c|--context <context>          Используемый DbContext. Если этот параметр опущен, используется значение DbContext по умолчанию
      -f|--force                      Сброс без подтверждения
      -h|--help                       Показать справочную информацию
      -v|--verbose                    Включить подробный вывод

dotnet-ef-database-update
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: text

    Применение: dotnet ef database update [аргументы] [опции]

    Аргументы:
      [migration]  Выбранная миграция. Если '0', все миграции будут отменены. Если этот параметр опущен, будут применены все ожидающие миграции

    Опции:
      -c|--context <context>          Используемый DbContext. Если этот параметр опущен, используется значение DbContext по умолчанию
      -e|--environment <environment>  Используемая среда. Если этот параметр опущен, используется "Development".
      -h|--help                       Показать справочную информацию
      -v|--verbose                    Включить подробный вывод

dotnet-ef-dbcontext
~~~~~~~~~~~~~~~~~~~

.. code-block:: text

    Применение: dotnet ef dbcontext [опции] [команда]

    Опции:
      -h|--help     Показать справочную информацию
      -v|--verbose  Включить подробный вывод

    Команды:
      list      Вывести список типов DbContext
      scaffold  Выполнить скаффолдинг DbContext и классов типов сущностей для указанной базы данных

dotnet-ef-dbcontext-list
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: text

    Применение: dotnet ef dbcontext list [опции]

    Опции:
      -e|--environment <environment>  Используемая среда. Если этот параметр опущен, используется "Development".
      --json                          Используется вывод json. JSON находится между '//BEGIN' и '//END'
      -h|--help                       Показать справочную информацию
      -v|--verbose                    Включить подробный вывод

dotnet-ef-dbcontext-scaffold
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: text

    Применение: dotnet ef dbcontext scaffold [аргументы] [опции]

    Аргументы:
      [connection]  Строка подключения базы данных
      [provider]    Используемый провайдер. Например, Microsoft.EntityFrameworkCore.SqlServer

    Опции:
      -a|--data-annotations           Использовать атрибуты DataAnnotation для настройки модели, где это возможно. Если опущены, выводимый код будет использовать только Fluent API.
      -c|--context <name>             Имя генерируемого класса DbContext.
      -f|--force                      Форсировать скаффолдинг для перезаписи существующих файлов. В противном случае, код будет выполняться только при условии, что выводимые файлы не будут перезаписаны.
      -o|--output-dir <path>          Папка проекта, куда должны быть выведены классы. Если опущен, используется каталог верхнего уровня проекта.
      --schema <schema>               Выбранная схема для генерируемых классов.
      -t|--table <schema.table>       Выбранные таблицы для генерируемых классов.
      -e|--environment <environment>  Используемая среда. Если этот параметр опущен, используется "Development".
      -h|--help                       Показать справочную информацию
      -v|--verbose                    Включить подробный вывод

dotnet-ef-migrations
~~~~~~~~~~~~~~~~~~~~

.. code-block:: text

    Применение: dotnet ef migrations [опции] [команда]

    Опции:
      -h|--help     Показать справочную информацию
      -v|--verbose  Включить подробный вывод

    Команды:
      add     Добавить добавить новую миграцию
      list    Вывести список миграций
      remove  Удалить последнюю миграцию
      script  Сгенерировать из миграции SQL скрипт

dotnet-ef-migrations-add
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: text

    Применение: dotnet ef migrations add [аргументы] [опции]

    Аргументы:
      [name]  Имя миграции

    Опции:
      -o|--output-dir <path>          Используемая директория (под-директория) Если этот параметр опущен, используется "Миграции". Относительные пути задаются относительно каталога, в котором выполняется команда.
      -c|--context <context>          Используемый DbContext. Если этот параметр опущен, используется значение DbContext по умолчанию
      -e|--environment <environment>  Используемая среда. Если этот параметр опущен, используется "Development".
      --json                          Используется вывод json. JSON находится между '//BEGIN' и '//END'
      -h|--help                       Показать справочную информацию
      -v|--verbose                    Включить подробный вывод

dotnet-ef-migrations-list
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: text

    Применение: dotnet ef migrations list [опции]

    Опции:
      -c|--context <context>          Используемый DbContext. Если этот параметр опущен, используется значение DbContext по умолчанию
      -e|--environment <environment>  Используемая среда. Если этот параметр опущен, используется "Development".
      --json                          Используется вывод json. JSON находится между '//BEGIN' и '//END'
      -h|--help                       Показать справочную информацию
      -v|--verbose                    Включить подробный вывод

dotnet-ef-migrations-remove
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: text

    Применение: dotnet ef migrations remove [опции]

    Опции:
      -c|--context <context>          Используемый DbContext. Если этот параметр опущен, используется значение DbContext по умолчанию
      -e|--environment <environment>  Используемая среда. Если этот параметр опущен, используется "Development".
      -f|--force                      Удаляет последнюю миграцию без проверки базы данных. Если последняя миграция была применена к базе данных, вам нужно будет вручную отменить изменения, которые были применены.
      -h|--help                       Показать справочную информацию
      -v|--verbose                    Включить подробный вывод

dotnet-ef-migrations-script
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: text

    Применение: dotnet ef migrations script [аргументы] [опции]

    Аргументы:
      [from]  Начальная миграция Если опущен, используется '0' (инициирование базы данных).
      [to]    Замыкающая миграция Если опущен, применяется последняя миграция

    Опции:
      -o|--output <file>              Файл для записи скрипта вместо стандартного вывода
      -i|--idempotent                 Генерирует идемпотентный скрипт, который используется базой данных для любой миграции
      -c|--context <context>          Используемый DbContext. Если этот параметр опущен, используется значение DbContext по умолчанию
      -e|--environment <environment>  Используемая среда. Если этот параметр опущен, используется "Development".
      -h|--help                       Показать справочную информацию
      -v|--verbose                    Включить подробный вывод


Распространенные ошибки
-----------------------

.. include:: _common_errors.txt

.. _dotnet_cli_issues:

Известные проблеммы Preview 2
-----------------------------

Выбор библиотеки классов проекта не поддерживается
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

По состоянию на Preview 2 .NET Core CLI не поддерживает выполнение команд из классов библиотек.
Несмотря на возможность установить инструменты EF, выполнение команд может вызвать следующую ошибку.

.. code-block:: text

  Could not invoke this command on the startup project '(your project name)'. This preview of Entity Framework tools does not support commands on class library projects in ASP.NET Core and .NET Core applications.

Смотрите о проблемме https://github.com/dotnet/cli/issues/2645.

Пояснение
^^^^^^^^^
Если команда ``dotnet run`` не запускает проект, то ``dotnet ef`` так же не будет работать.

"dotnet ef" вызывается как альтернативная точка входа в приложение. В настоящее время, если "startup" проект не является приложением, то невозможно запустить проект как приложение с альтернативной точкой входа "dotnet ef".

Проект "startup"  является умолчательным для текущего проекта, если не указан другой с параметром ``--startup-project``.

Временное решение 1
^^^^^^^^^^^^^^^^^^^

Определите запуск проекта, который будет "runnable app".

Пример:

.. code-block:: console

    dotnet ef --startup-project ../MyConsoleApplication/ migrations list

Временное решение 2
^^^^^^^^^^^^^^^^^^^
Преобразовать проект библиотеки классов в проект "app". Это может быть или приложение .NET Core или desktop .NET.

Чтобы создать проект .NET Core App, добавьте каркас "netcoreapp1.0" в project.json вместе с другими параметрами как в примере ниже:

.. code-block:: json

    {
        "buildOptions": {
            "emitEntryPoint": true
        },
        "frameworks": {
            "netcoreapp1.0": {
                "dependencies": {
                    "Microsoft.NETCore.App": {
                        "type": "platform",
                        "version": "1.0.0-*"
                    }
                }
            }
        }
    }

Чтобы создать desktop приложение .NET, убедитесь. что вы выбрали проект "net451" или новее (например "net461" тоже работает) и убедитесь, что опция построения ``"emitEntryPoint"`` установлена в "true".

.. code-block:: json

    {
        "buildOptions": {
            "emitEntryPoint": true
        },
        "frameworks": {
            "net451": { }
        }
    }
