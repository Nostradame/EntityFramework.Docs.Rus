Логгирование
==================

.. contents:: `В этой статье:`
    :local:

.. include:: /_shared/sample.txt
.. _пример: https://github.com/aspnet/EntityFramework.Docs/tree/master/samples/Miscellaneous/Logging

Создание логгера
----------------------------

Первым шагом является создание реализации ``ILoggerProvider`` а также ``ILogger``.
 * ``ILoggerProvider`` это компонент, который принимает решение, когда создается экземпляр вашего логгера(логгеров). Провайдер может выбрать создание различных логгеров в различных ситуациях.
 * ``ILogger`` это компонент, который делает фактическое логгирование. Он будет передавать информацию из каркаса при наступлении определенных событий.

Вот простая реализация, которая пишет лог в текстовый файл и Console удобные для чтения человеком представления каждого события.

.. includesamplefile:: Miscellaneous/Logging/Logging/MyLoggerProvider.cs
        :language: csharp
        :linenos:

.. tip::
  Аргументы, передаваемые методу Log это:
   * ``logLevel`` уровень логгируемого события (например, Warning, Info, Verbose, и т.д.),
   * ``eventId`` это специфический для библиотеки/сборки id, который представляет тип логгируемого события
   * ``state`` может быть любым объектом, который содержит состояние, имеющее отношение к тому, что будет логгироваться
   * ``exception`` дает вам исключение, которое возникает, если был сбой логгирования
   * ``formatter`` использует состояние и ошибку для создания удобного для чтения человеком текста лога

Регистрация логгера
--------------------------

ASP.NET Core
^^^^^^^^^^^^

В приложении ASP.NET Core, вы регистрируете свой логгер в методе Configure файла Startup.cs::

  public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
  {
      loggerFactory.AddProvider(new MyLoggerProvider());

      ...
  }

Другие приложения
^^^^^^^^^^^^^^^^^^^^^^^^

Создайте и инициируйте контекст и зарегистрируйте логгер в коде запуска вашего приложения.

.. note::
  Вам только нужно зарегистрировать логгер с одним экземпляром контекста. Как только вы зарегистрировали его, он будет использоваться для всех остальных экземплярах контекста в том же домене приложения.

.. includesamplefile:: Miscellaneous/Logging/Logging.ConsoleApp/Program.cs
        :language: csharp
        :linenos:
        :lines: 12-17

Фильтрация логгирования
----------------------------------------

Самый простой способ для фильтрации логгирования, заключается в том, чтобы настроить провайдера логгирования возвращать лог только для определенных категорий событий. Для EF, категории, которые передаются вашему провайдеру логгирования должны быть с именем типа компонента, который журналирует событие.

Например, вот провайдер логгирования, который возвращает лог только для событий, связанных с выполнением SQL реляционной базы данных. Для других категорий событий возвращается пустой лог (в котором ничего нет).

.. includesamplefile:: Miscellaneous/Logging/Logging/MyFilteredLoggerProvider.cs
        :language: csharp
        :linenos:
        :emphasize-lines: 9-13, 17-22
